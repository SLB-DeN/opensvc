##############################################################################
#                                                                            #
# sync, type ibmdssnap                                                       #
#                                                                            #
##############################################################################

[sync#0]
;type = ibmdssnap

#
# keyword:       pairs
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Whitespace-separated list of device pairs.
#
;pairs = 0065:0073 0066:0074

#
# keyword:       array
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  The name of the array holding the source devices and their paired
#         devices.
#
;array = IBM.2243-12ABC00

#
# keyword:       bgcopy
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  Initiate a background copy of the source data block to the paired
#         devices upon resync.
#
;bgcopy = True

#
# keyword:       recording
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  Track only changed data blocks instead of copying the whole source
#         data to the paired devices.
#
;recording = True

#
# keyword:       restart
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      0
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  The agent will try to restart a resource n times before falling back
#         to the monitor action.
#
;restart = 0

#
# keyword:       tags
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A list of tags. Arbitrary tags can be used to limit action scope to
#         resources with a specific tag. Some tags can influence the driver
#         behaviour. For example the 'encap' tag assigns the resource to the
#         encapsulated service.
#
;tags = foo

#
# keyword:       subset
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Assign the resource to a specific subset.
#
;subset = foo

#
# keyword:       monitor
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  A monitored resource will trigger a node suicide if the service has
#         a heartbeat resource in up state
#
;monitor = False

#
# keyword:       disable
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  A disabled resource will be ignored on service startup and shutdown.
#
;disable = False

#
# keyword:       optional
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  Possible values are 'true' or 'false'. Actions on resource will be
#         tried upon service startup and shutdown, but action failures will be
#         logged and passed over. Useful for resources like dump filesystems
#         for example.
#
;optional = False

#
# keyword:       always_on
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   nodes | drpnodes | nodes drpnodes
#  depends:      None
#  scopable:     False
#
#  desc:  Possible values are 'nodes', 'drpnodes' or 'nodes drpnodes', or a
#         list of nodes. Sets the nodes on which the resource is always kept
#         up. Primary usage is file synchronization receiving on non-shared
#         disks. Don't set this on shared disk !! danger !!
#
;always_on = nodes

#
# keyword:       pre_start
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource start action
#
;pre_start = foo

#
# keyword:       post_start
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource start action
#
;post_start = foo

#
# keyword:       pre_stop
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource stop action
#
;pre_stop = foo

#
# keyword:       post_stop
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource stop action
#
;post_stop = foo

#
# keyword:       pre_syncnodes
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource syncnodes action
#
;pre_syncnodes = foo

#
# keyword:       post_syncnodes
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource syncnodes action
#
;post_syncnodes = foo

#
# keyword:       pre_syncdrp
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource syncdrp action
#
;pre_syncdrp = foo

#
# keyword:       post_syncdrp
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource syncdrp action
#
;post_syncdrp = foo

#
# keyword:       pre_syncresync
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource syncresync action
#
;pre_syncresync = foo

#
# keyword:       post_syncresync
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource syncresync action
#
;post_syncresync = foo

#
# keyword:       sync_interval
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      30
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  Set the minimum delay between syncs in minutes. If a sync is
#         triggered through crond or manually, it is skipped if last sync
#         occured less than 'sync_min_delay' ago. If no set in a resource
#         section, fallback to the value set in the 'default' section. The
#         mecanism is enforced by a timestamp created upon each sync
#         completion in /opt/opensvc/var/sync/[service]![dst]
#
;sync_interval = 30

#
# keyword:       sync_days
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Set the days this resource synchronization is allowed.
#
;sync_days = ["monday", "friday"]

#
# keyword:       sync_period
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Set the time ranges this resource synchronization is allowed.
#
;sync_period = [["04:00", "06:00"], ["18:00", "20:00"]]

#
# keyword:       sync_max_delay
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      1440
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  Unit is minutes. This sets to delay above which the sync status of
#         the resource is to be considered down. Should be set according to
#         your application service level agreement. The cron job frequency
#         should be set between 'sync_min_delay' and 'sync_max_delay'.
#
;sync_max_delay = 1440

