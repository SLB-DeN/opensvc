##############################################################################
#                                                                            #
# hash_policy, type envoy                                                    #
#                                                                            #
##############################################################################

[hash_policy#0]
;type = envoy

#
# keyword:          connection_source_ip
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  Hash on source IP address.
#
;connection_source_ip = foo

#
# keyword:          cookie_name
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  The name of the cookie that will be used to obtain the hash key. If
#         the cookie is not present and ttl below is not set, no hash will be
#         produced.
#
;cookie_name = foo

#
# keyword:          cookie_path
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  The name of the path for the cookie. If no path is specified here,
#         no path will be set for the cookie.
#
;cookie_path = foo

#
# keyword:          cookie_ttl
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         duration
#
#  desc:  If specified, a cookie with the TTL will be generated if the cookie
#         is not present. If the TTL is present and zero, the generated cookie
#         will be a session cookie.
#
;cookie_ttl = foo

#
# keyword:          header_header_name
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  The name of the request header that will be used to obtain the hash
#         key. If the request header is not present, no hash will be produced.
#
;header_header_name = foo

#
# keyword:          terminal
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         boolean
#
#  desc:  Shortcircuits the hash computing. This field provides a fallback
#         style of configuration: if a terminal policy doesn't work, fallback
#         to rest of the policy list. It saves time when the terminal policy
#         works.
#
;terminal = foo

