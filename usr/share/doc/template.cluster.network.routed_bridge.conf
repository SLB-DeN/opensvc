##############################################################################
#                                                                            #
# network, type routed_bridge                                                #
#                                                                            #
##############################################################################

[network#rindex]
;type = routed_bridge

#
# keyword:          addr
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         Detect using a name resolution of <nodename>. Beware, if the nodename resolves to 127.0.1.1 or 127.0.0.1 the ipip tunnel can not work.
#  scope order:     specific > generic
#
#  desc:  The ip address used as local endpoint for the ipip tunnel configured
#         by network setup to access the backend subnet of peer nodes not on
#         the same subnet.
#
;addr = Detect using a name resolution of <nodename>. Beware, if the nodename resolves to 127.0.1.1 or 127.0.0.1 the ipip tunnel can not work.

#
# keyword:          ips_per_node
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         1024
#  scope order:     specific > generic
#  convert:         integer
#
#  desc:  The number of allocatable ips per node on the network. Converted to
#         the closest power of two.
#
;ips_per_node = 1024

#
# keyword:          network
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         10.22.0.0/16
#  scope order:     specific > generic
#
#  desc:  The cluster backend network. The routed_bridge driver fragments this
#         network into :kw:`ips_per_nodes` blocks subnets.
#
;network = 10.22.0.0/16

#
# keyword:          tables
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         main
#  scope order:     specific > generic
#  convert:         list
#
#  desc:  The list of routing tables to add the backend network routes to. The
#         list of available tables is in ``/etc/iproute2/rt_tables``.
#
;tables = main

#
# keyword:          tunnel
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         auto
#  scope order:     specific > generic
#  candidates:      auto | always
#
#  desc:  Create and route trafic through tunnels to peer nodes policy.
#         ``auto`` tunnel if the peer is not in the same subnet, ``always``
#         tunnel even if the peer seems to be in the same subnet (some hosting
#         providers require this as traffic goes through router even between
#         adjacent nodes.
#
;tunnel = auto

