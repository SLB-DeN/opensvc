##############################################################################
#                                                                            #
# DEFAULT                                                                    #
#                                                                            #
##############################################################################

[DEFAULT#0]
#
# keyword:          children
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         
#  scope order:     specific > generic
#  convert:         list_lower
#
#  desc:  List of services that must be 'avail down' before allowing this
#         service to be stopped by the daemon monitor. Whitespace separated.
#
;children = 

#
# keyword:          disable
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         False
#  scope order:     specific > generic
#  candidates:      True | False
#  convert:         boolean
#
#  desc:  A disabled resource will be ignored on service startup and shutdown.
#         Its status is always reported ``n/a``.  Set in DEFAULT, the whole
#         service is disabled. A disabled service does not honor start and
#         stop actions. These actions immediately return success.  :cmd:`sudo
#         svcmgr -s <svcname> disable` only sets :kw:`DEFAULT.disable`. As
#         resources disabled state is not changed, :cmd:`sudo svcmgr -s
#         <svcname> enable` does not enable disabled resources.
#
;disable = False

#
# keyword:          drp_flex_primary
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         <first node of the drpnodes parameter>
#  scope order:     specific > generic
#  depends:         topology in ['flex']
#
#  desc:  The drpnode in charge of syncing the other drpnodes. --cluster
#         actions on the drp_flex_primary are execute on all drpnodes (ie, not
#         pri nodes).
#
;drp_flex_primary = <first node of the drpnodes parameter>

#
# keyword:          drpnode
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         None
#  scope order:     specific > generic
#
#  desc:  The backup node where the service is activated in a DRP situation.
#         This node is also a data synchronization target for 'sync'
#         resources.
#
;drpnode = node1

#
# keyword:          drpnodes
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         
#  scope order:     specific > generic
#  convert:         list_lower
#
#  desc:  Alternate backup nodes, where the service could be activated in a
#         DRP situation if the 'drpnode' is not available. These nodes are
#         also data synchronization targets for 'sync' resources.
#
;drpnodes = 

#
# keyword:          env
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         <same as node env>
#  scope order:     specific > generic
#  candidates:      DEV | DRP | FOR | INT | PRA | PRD | PRJ | PPRD | REC | STG | TMP | TST | UAT
#
#  desc:  A non-PRD service can not be brought up on a PRD node, but a PRD
#         service can be startup on a non-PRD node (in a DRP situation). The
#         default value is the node env.
#
;env = <same as node env>

#
# keyword:          flex_primary
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         <first node of the nodes parameter>
#  scope order:     specific > generic
#  depends:         topology in ['flex']
#
#  desc:  The node in charge of syncing the other nodes. --cluster actions on
#         the flex_primary are execute on all peer nodes (ie, not drpnodes).
#
;flex_primary = <first node of the nodes parameter>

#
# keyword:          id
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         <random uuid>
#  scope order:     specific > generic
#
#  desc:  A RFC 4122 random uuid generated by the agent. To use as reference
#         in resources definitions instead of the service name, so the service
#         can be renamed without affecting the resources.
#
;id = <random uuid>

#
# keyword:          kind
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         pool
#  scope order:     specific > generic
#  candidates:      pool
#
#  desc:  Defines the kind of service.
#
;kind = pool

#
# keyword:          lock_timeout
# ----------------------------------------------------------------------------
#  scopable:        False
#  required:        False
#  default:         60
#  scope order:     specific > generic
#  convert:         duration
#
#  desc:  A duration expression, like '1m30s'. The maximum wait time for the
#         action lock acquire. The svcmgr --waitlock option overrides this
#         parameter.
#
;lock_timeout = 60

#
# keyword:          nodes
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  default:         <hostname of the current node>
#  scope order:     specific > generic
#  convert:         nodes_selector
#
#  desc:  A node selector expression specifying the list of cluster nodes
#         hosting service instances.
#
;nodes = <hostname of the current node>

