##############################################################################
#                                                                            #
# expose, type envoy                                                         #
#                                                                            #
##############################################################################

[expose#rindex]
;type = envoy

#
# keyword:          cluster_certificates
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         list
#
#  desc:  The TLS certificates used to communicate with cluster endpoints.
#
;cluster_certificates = foo

#
# keyword:          cluster_data
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         json
#
#  desc:  The envoy protocol compliant data in json format used to bootstrap
#         the Cluster config messages. Parts of this structure, like
#         endpoints, are amended to reflect the actual cluster state.
#
;cluster_data = foo

#
# keyword:          cluster_private_key_filename
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  Local filesystem data source of the TLS private key used to
#         communicate with cluster endpoints.
#
;cluster_private_key_filename = foo

#
# keyword:          filter_config_data
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         json
#
#  desc:  The envoy protocol compliant data in json format used to bootstrap
#         the Listener filter config messages. Parts of this structure, like
#         routes, are amended by more specific keywords.
#
;filter_config_data = foo

#
# keyword:          gateway
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  The name of the ingress gateway that should handle this expose.
#
;gateway = foo

#
# keyword:          lb_policy
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         round robin
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  candidates:      round robin | least_request | ring_hash | random | original_dst_lb | maglev
#
#  desc:  The name of the envoy cluster load balancing policy.
#
;lb_policy = round robin

#
# keyword:          listener_addr
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         The main proxy ip address.
#  inheritance:     leaf > head
#  scope order:     specific > generic
#
#  desc:  The public ip address to expose from.
#
;listener_addr = The main proxy ip address.

#
# keyword:          listener_certificates
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         list
#
#  desc:  The TLS certificates used by the listener.
#
;listener_certificates = foo

#
# keyword:          listener_port
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         The expose <port>.
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         integer
#
#  desc:  The public port number to expose from. The special value 0 is
#         interpreted as a request for auto-allocation.
#
;listener_port = The expose <port>.

#
# keyword:          port
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        True
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         integer
#
#  desc:  The port number of the endpoint.
#
;port = foo

#
# keyword:          protocol
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         tcp
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  candidates:      tcp | udp
#
#  desc:  The protocol of the endpoint.
#
;protocol = tcp

#
# keyword:          sni
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         list
#
#  desc:  The SNI server names to match on the proxy to select this service
#         endpoints. The socket server must support TLS.
#
;sni = foo

#
# keyword:          vhosts
# ----------------------------------------------------------------------------
#  scopable:        True
#  required:        False
#  provisioning:    False
#  default:         None
#  inheritance:     leaf > head
#  scope order:     specific > generic
#  convert:         list
#
#  desc:  The list of vhost resource identifiers for this expose.
#
;vhosts = foo

