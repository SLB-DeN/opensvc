##############################################################################
#                                                                            #
# sync, type rsync                                                           #
#                                                                            #
##############################################################################

[sync#0]
;type = rsync

#
# keyword:       src
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Source of the sync. Can be a whitespace-separated list of files or
#         dirs passed as-is to rsync. Beware of the meaningful ending '/'.
#         Refer to the rsync man page for details.
#
;src = foo

#
# keyword:       dst
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  Destination of the sync. Beware of the meaningful ending '/'. Refer
#         to the rsync man page for details.
#
;dst = foo

#
# keyword:       target
# ----------------------------------------------------------------------------
#  required:     True
#  provisioning: False
#  default:      None
#  candidates:   nodes | drpnodes | nodes drpnodes
#  depends:      None
#  scopable:     False
#
#  desc:  Describes which nodes should receive this data sync from the PRD
#         node where the service is up and running. SAN storage shared 'nodes'
#         must not be sync to 'nodes'. SRDF-like paired storage must not be
#         sync to 'drpnodes'.
#
;target = nodes

#
# keyword:       dstfs
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  If set to a remote mount point, OpenSVC will verify that the
#         specified mount point is really hosting a mounted FS. This can be
#         used as a safety net to not overflow the parent FS (may be root).
#
;dstfs = foo

#
# keyword:       snap
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     False
#
#  desc:  If set to true, OpenSVC will try to snapshot the first snapshottable
#         parent of the source of the sync and try to sync from the snap.
#
;snap = False

#
# keyword:       tags
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  The sync resource supports the 'delay_snap' tag. This tag is used to
#         delay the snapshot creation just before the rsync, thus after
#         'postsnap_trigger' execution. The default behaviour (no tags) is to
#         group all snapshots creation before copying data to remote nodes,
#         thus between 'presnap_trigger' and 'postsnap_trigger'.
#
;tags = foo

#
# keyword:       exclude
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  !deprecated!. A whitespace-separated list of --exclude params passed
#         unchanged to rsync. The 'options' keyword is preferred now.
#
;exclude = foo

#
# keyword:       options
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  A whitespace-separated list of params passed unchanged to rsync.
#         Typical usage is ACL preservation activation.
#
;options = foo

#
# keyword:       bwlimit
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  Bandwidth limit in KB applied to this rsync transfer. Leave empty to
#         enforce no limit. Takes precedence over 'bwlimit' set in [DEFAULT].
#
;bwlimit = foo

#
# keyword:       restart
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      0
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  The agent will try to restart a resource n times before falling back
#         to the monitor action.
#
;restart = 0

#
# keyword:       tags
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A list of tags. Arbitrary tags can be used to limit action scope to
#         resources with a specific tag. Some tags can influence the driver
#         behaviour. For example the 'encap' tag assigns the resource to the
#         encapsulated service.
#
;tags = foo

#
# keyword:       subset
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Assign the resource to a specific subset.
#
;subset = foo

#
# keyword:       monitor
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  A monitored resource will trigger a node suicide if the service has
#         a heartbeat resource in up state
#
;monitor = False

#
# keyword:       disable
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  A disabled resource will be ignored on service startup and shutdown.
#
;disable = False

#
# keyword:       optional
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      False
#  candidates:   True | False
#  depends:      None
#  scopable:     True
#
#  desc:  Possible values are 'true' or 'false'. Actions on resource will be
#         tried upon service startup and shutdown, but action failures will be
#         logged and passed over. Useful for resources like dump filesystems
#         for example.
#
;optional = False

#
# keyword:       always_on
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   nodes | drpnodes | nodes drpnodes
#  depends:      None
#  scopable:     False
#
#  desc:  Possible values are 'nodes', 'drpnodes' or 'nodes drpnodes', or a
#         list of nodes. Sets the nodes on which the resource is always kept
#         up. Primary usage is file synchronization receiving on non-shared
#         disks. Don't set this on shared disk !! danger !!
#
;always_on = nodes

#
# keyword:       pre_start
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource start action
#
;pre_start = foo

#
# keyword:       post_start
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource start action
#
;post_start = foo

#
# keyword:       pre_stop
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource stop action
#
;pre_stop = foo

#
# keyword:       post_stop
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource stop action
#
;post_stop = foo

#
# keyword:       pre_syncnodes
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource syncnodes action
#
;pre_syncnodes = foo

#
# keyword:       post_syncnodes
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource syncnodes action
#
;post_syncnodes = foo

#
# keyword:       pre_syncdrp
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource syncdrp action
#
;pre_syncdrp = foo

#
# keyword:       post_syncdrp
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource syncdrp action
#
;post_syncdrp = foo

#
# keyword:       pre_syncresync
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute before the resource syncresync action
#
;pre_syncresync = foo

#
# keyword:       post_syncresync
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  A script to execute after the resource syncresync action
#
;post_syncresync = foo

#
# keyword:       schedule
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      None
#  candidates:   None
#  depends:      None
#  scopable:     True
#
#  desc:  Set the this resource synchronization schedule. See
#         usr/share/doc/node.conf for the schedule syntax reference.
#
;schedule = ["00:00-01:00@61 mon", "02:00-03:00@61 tue-sun"]

#
# keyword:       sync_max_delay
# ----------------------------------------------------------------------------
#  required:     False
#  provisioning: False
#  default:      1440
#  candidates:   None
#  depends:      None
#  scopable:     False
#
#  desc:  Unit is minutes. This sets to delay above which the sync status of
#         the resource is to be considered down. Should be set according to
#         your application service level agreement. The cron job frequency
#         should be set between 'sync_min_delay' and 'sync_max_delay'.
#
;sync_max_delay = 1440

