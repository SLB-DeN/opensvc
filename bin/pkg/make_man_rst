#!/usr/bin/env python

import sys
import os
import optparse
import datetime
import re
from textwrap import wrap

pathsvc = os.path.realpath(os.path.join(os.path.dirname(__file__), '..', '..'))
pathlib = os.path.join(pathsvc, "lib")
pathman = os.path.join(pathsvc, "tmp")

sys.path = [pathlib] + sys.path

class ManRstFormatter(optparse.HelpFormatter):
    def __init__(self, indent_increment=2, max_help_position=24,
             width=None, short_first=1):
        """CONSTRUCTOR. UNFORTUNATELY HELPFORMATTER IS NO NEW-STYLE CLASS."""
        optparse.HelpFormatter.__init__(self, indent_increment,
                                        max_help_position, width, short_first)
        self._today = datetime.date.today()
 
    def _markup(self, txt):
        """PREPARES TXT TO BE USED IN MAN PAGES."""
        #return txt.replace('-', '\\-')
        return txt
 
    def format_usage(self, usage):
        """FORMAT THE USAGE/SYNOPSIS LINE."""
        return self._markup(usage)
 
    def format_heading(self, heading):
        """FORMAT A HEADING.  IF LEVEL IS 0 RETURN AN EMPTY STRING. THIS USUALLY IS THE STRING "OPTIONS".  """
        if self.level == 0:
            return ''
        s = ":cmd:`%s`\n" % heading
        s += "=" * (7+len(heading))
        return s
 
    def format_option(self, option):
        """FORMAT A SINGLE OPTION.
        THE BASE CLASS TAKES CARE TO REPLACE CUSTOM OPTPARSE VALUES.
        """
        result = []
        opts = self.option_strings[option]
        result.append(':opt:`%s`\n\n' % self._markup(opts))
        if option.help:
            help_text = "\n".join(["\t"+line for line in self.expand_default(option).splitlines()])+"\n\n"
            result.append(help_text)
        return ''.join(result)

    def _write_header(self, appname, synopsis=None, desc=None, long_desc=None):
        # title
        ret = []
        ret.append("%s\n" % self._markup(appname.lower()))
        ret.append("*" * (len(self._markup(appname)))+"\n")

        # SYNOPSIS section
        l = synopsis.split("\n")

        # COMMANDS section
        commands = "\n".join(l[1:])

        # highlight sections
        commands = re.sub(r'^(\w.+)\n(-+)',
                          lambda pat: pat.group(1)+"\n"+"-"*len(pat.group(1)), commands, flags=re.MULTILINE)

        # highlight actions
        commands = re.sub(r'^  ((svcmgr|nodemgr|svcmon) .*)$',
                          lambda pat: ".. _%s:\n\n" % pat.group(1).lower().replace(" ", ".")+":cmd:`%s`\n"%pat.group(1)+"+"*(7+len(pat.group(1))), commands, flags=re.MULTILINE)

        if len(commands) > 0:
            ret.append('%s\n' % commands)

        return ''.join(ret)

    def _write_footer(self):
        return ""

def do_svcmgr():
    prog = "svcmgr"
    desc = """OpenSVC agent's services instances management command."""
    long_desc = """In the OpenSVC infrastructure, the node is an operating system instance with an OpenSVC agent installed. The node may host OpenSVC services instances. The \\fBsvcmgr\\fP program provides commands to provision, configure, stop, start and replicate services instances on the local node."""

    import svcmgr_parser
    optparser = svcmgr_parser.SvcmgrOptParser(args=["-h"], colorize=False, width=10000, formatter=ManRstFormatter(), indent=0)
    optparser.set_full_usage()
    parser = optparser.parser
    parser.formatter = ManRstFormatter()
    parser.formatter.set_parser(parser)
    synopsis = parser.get_usage()
    l = parser.formatter._write_header(prog, synopsis=synopsis, desc=desc, long_desc=long_desc)
    #l += parser.format_option_help()
    l += parser.formatter._write_footer()
    fname = prog + ".rst"
    fpath = os.path.join(pathman, fname)
    print "writing", fpath
    with open(fpath, "w") as f:
        f.write(l)

def do_nodemgr():
    prog = "nodemgr"
    desc = """OpenSVC agent's node management command."""
    long_desc = """In the OpenSVC infrastructure, the node is an operating system instance with an OpenSVC agent installed. The node may host OpenSVC services instances. The \\fBnodemgr\\fP program provides commands to configure and execute all the agent functions that interact with the node."""

    import nodemgr_parser
    optparser = nodemgr_parser.NodemgrOptParser(args=["-h"], colorize=False, width=10000, formatter=ManRstFormatter(), indent=0)
    optparser.set_full_usage()
    parser = optparser.parser
    parser.formatter = ManRstFormatter()
    parser.formatter.set_parser(parser)
    synopsis = parser.get_usage()
    l = parser.formatter._write_header(prog, synopsis=synopsis, desc=desc, long_desc=long_desc)
    #l += parser.format_option_help()
    l += parser.formatter._write_footer()
    fname = prog + ".rst"
    fpath = os.path.join(pathman, fname)
    print "writing", fpath
    with open(fpath, "w") as f:
        f.write(l)

def do_svcmon():
    prog = "svcmon"
    desc = """OpenSVC agent's services instances status requesting command."""
    long_desc = """In the OpenSVC infrastructure, the node is an operating system instance with an OpenSVC agent installed. The node may host OpenSVC services instances. The \\fBsvcmon\\fP program prints the digested cluster and services status."""

    import svcmon
    parser = svcmon.parser
    svcmon.parser.formatter = ManRstFormatter()
    parser.formatter.set_parser(parser)
    synopsis = parser.get_usage()
    l = parser.formatter._write_header(prog, synopsis=synopsis, desc=desc, long_desc=long_desc)
    l += parser.format_option_help()
    l += parser.formatter._write_footer()
    fname = prog + ".rst"
    fpath = os.path.join(pathman, fname)
    print "writing", fpath
    with open(fpath, "w") as f:
        f.write(l)

if __name__ == "__main__":
    do_svcmgr()
    do_nodemgr()
    do_svcmon()

