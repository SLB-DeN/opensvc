#!/usr/bin/env python2.6

import os
import shutil
import glob
from subprocess import *

def install_cron():
    """install opensvc cron jobs
    """
    ce = [{
           'sched': "0,10,20,30,40,50 * * * *",
           'user': "",
           'cmd': "[ -x /opt/opensvc/bin/svcmon ] && /opt/opensvc/bin/svcmon --updatedb >/dev/null 2>&1"
    },{
           'sched': "0 4 * * *",
           'user': "",
           'cmd': "[ -x /opt/opensvc/bin/cron/opensvc.daily ] && /opt/opensvc/bin/cron/opensvc.daily >/dev/null 2>&1"
    }]

    purge = []
    root_crontab = False

    """ order of preference
    """
    sysname, nodename, x, x, machine = os.uname()
    if sysname == 'SunOS' :
        root_crontab_locs = [
            '/var/spool/cron/crontabs/root'
        ]
    else:
        root_crontab_locs = [
            '/etc/cron.d/opensvc',
            '/var/spool/cron/crontabs/root',
            '/var/spool/cron/root',
        ]
    for loc in root_crontab_locs:
        if os.path.exists(os.path.dirname(loc)):
            if not root_crontab:
                root_crontab = loc
                if root_crontab == '/etc/cron.d/opensvc':
                    ce[0]['user'] = "root"
                    ce[1]['user'] = "root"
            elif os.path.exists(loc):
                purge.append(loc)

    if not root_crontab:
        print "no root crontab found in usual locations %s"%str(root_crontab_locs)
        return False

    cron_entry_1 = ' '.join([ce[0]['sched'], ce[0]['user'], ce[0]['cmd']])
    cron_entry_2 = ' '.join([ce[1]['sched'], ce[1]['user'], ce[1]['cmd']])

    new = False
    if os.path.exists(root_crontab):
        with open(root_crontab, 'r') as f:
            svcmon_present = False
            dailycron_present = False
            new = f.readlines()
            for i, line in enumerate(new):
                if 'opensvc.daily' in line:
                    dailycron_present = True
                if 'svcmon --updatedb' in line:
                    svcmon_present = True
                if '/usr/local/opensvc' in line:
                    new[i] = line.replace('/usr/local/opensvc', '/opt/opensvc')
            if not svcmon_present:
                new.append(cron_entry_1+'\n')
            if not dailycron_present:
                new.append(cron_entry_2+'\n')
    else:
        new = []
        new.append(cron_entry_1+'\n')
        new.append(cron_entry_2+'\n')

    if not new:
        print "problem preparing the new crontab"
        return False
 
    with open(root_crontab, 'w') as f:
        f.write(''.join(new))

    """ Activate changes (actually only needed on HP-UX)
    """
    if '/var/spool/' in root_crontab:
        cmd = ['crontab', root_crontab]
        process = Popen(cmd, stdout=PIPE, stderr=PIPE, close_fds=True)
        buff = process.communicate()

    for loc in purge:
        with open(loc, 'r') as f:
            new = [ line for line in f.readlines() if not 'opensvc.daily' in line and not  'svcmon --updatedb' in line ]
        with open(loc, 'w') as f:
            f.write(''.join(new))

    """ Clean up old standard file locations
    """
    for f in ['/etc/cron.daily/opensvc', '/etc/cron.daily/opensvc.daily']:
        if os.path.exists(f):
            os.unlink(f)

def activate_redhat():
    cmd = ['chkconfig', '--add', 'opensvc']
    process = Popen(cmd, stdout=PIPE, stderr=PIPE, close_fds=True)
    buff = process.communicate()
    if process.returncode > 0:
        print buff[1]
        return False
    return True

def activate_debian():
    cmd = ['update-rc.d', '-f', 'opensvc', 'remove']
    process = Popen(cmd, stdout=PIPE, stderr=PIPE, close_fds=True)
    buff = process.communicate()
    if process.returncode > 0:
        print buff[1]
        return False
    cmd = ['update-rc.d', 'opensvc', 'defaults']
    process = Popen(cmd, stdout=PIPE, stderr=PIPE, close_fds=True)
    buff = process.communicate()
    if process.returncode > 0:
        print buff[1]
        return False
    return True

def activate_hpux():
    rc = "/sbin/init.d/opensvc"
    links = ["/sbin/rc1.d/K010opensvc", "/sbin/rc2.d/S990opensvc"]
    for l in links:
        if not os.path.islink(l):
            if os.path.exists(l):
                os.unlink(l)
            os.symlink(rc, l)
    with open("/etc/rc.config.d/opensvc", "w") as f:
        f.write("RUN_OPENSVC=1\n")
        f.close()
    return True

def activate_SunOS():
    rc = "/etc/init.d/opensvc"
    links = ["/etc/rc0.d/K00opensvc", "/etc/rc3.d/S99opensvc"]
    for l in links:
        if not os.path.islink(l):
            if os.path.exists(l):
                os.unlink(l)
            os.symlink(rc, l)
    return True

def install_rc():
    """install startup script
    """
    sysname, nodename, x, x, machine = os.uname()

    if os.path.exists('/etc/debian_version'):
        rc = '/etc/init.d/opensvc'
        src = '/opt/opensvc/bin/opensvc.init.debian'
        activate = activate_debian
    elif os.path.exists('/etc/redhat-release'):
        rc = '/etc/init.d/opensvc'
        src = '/opt/opensvc/bin/opensvc.init.redhat'
        activate = activate_redhat
    elif sysname == "HP-UX":
        rc = '/sbin/init.d/opensvc'
        src = '/opt/opensvc/bin/opensvc.init.hpux'
        activate = activate_hpux
    elif sysname == "SunOS":
        rc = '/etc/init.d/opensvc'
        src = '/opt/opensvc/bin/opensvc.init.SunOS'
        activate = activate_SunOS
    else:
        print "could not select an init script: unsupported operating system"
        return False

    if os.path.islink(rc):
        os.unlink(rc)

    shutil.copyfile(src, rc)
    os.chmod(rc, 0755)
    activate()

def gen_keys():
    home = os.environ['HOME']
    priv = os.path.join(home, ".ssh", "id_dsa")
    pub = os.path.join(home, ".ssh", "id_dsa.pub")
    if os.path.exists(pub) or os.path.exists(priv):
        return
    cmd = ['ssh-keygen', '-t', 'dsa', '-b', '1024', '-P', '', '-f', priv]
    process = Popen(cmd, stdout=PIPE, stderr=PIPE, close_fds=True)
    buff = process.communicate()

def convert_svclinks():
    pathetc = os.path.join(os.sep, 'opt', 'opensvc', 'etc')
    svcmgr = os.path.join('..', 'bin', 'svcmgr')
    rcService = os.path.realpath(os.path.join(os.sep, 'opt', 'opensvc', 'bin', 'rcService'))
    for fname in os.listdir(pathetc):
        fpath = os.path.join(pathetc, fname)
        if not os.path.islink(fpath):
            continue
        rpath = os.path.realpath(fpath)
        if rpath != rcService:
            continue
        os.unlink(fpath)
        os.symlink(svcmgr, fpath)

def move_usr_to_opt():
    linksvc = os.path.join(os.sep, 'service')
    pathsvc = os.path.join(os.sep, 'opt', 'opensvc')
    pathvar = os.path.join(pathsvc, 'var')
    pathetc = os.path.join(pathsvc, 'etc')
    old_pathsvc = os.path.join(os.sep, 'usr', 'local', 'opensvc')
    old_pathvar = os.path.join(old_pathsvc, 'var')
    old_pathetc = os.path.join(old_pathsvc, 'etc')

    if os.path.exists(old_pathvar):
        for f in glob.glob(old_pathvar+'/*'):
            dst = os.path.join(pathvar, os.path.basename(f))
            if os.path.exists(dst):
                continue
            shutil.move(f, dst)

    if os.path.exists(old_pathetc):
        for f in glob.glob(old_pathetc+'/*'):
            dst = os.path.join(pathetc, os.path.basename(f))
            if os.path.exists(dst):
                continue
            shutil.move(f, dst)

    if os.path.exists(old_pathsvc):
        shutil.rmtree(old_pathsvc)

    if os.path.islink(linksvc) and os.path.realpath(linksvc) == old_pathsvc:
        os.unlink(linksvc)

def install_profile():
    prof_d = os.path.join(os.sep, 'etc', 'profile.d')
    prof = os.path.join(prof_d, 'opensvc.sh')
    buff = "export PATH=$PATH:/opt/opensvc/bin:/opt/opensvc/etc\n"
    if not os.path.exists(prof_d):
        return
    with open(prof, 'w') as f:
        f.write(buff)

move_usr_to_opt()
convert_svclinks()
install_cron()
install_rc()
gen_keys()
install_profile()
