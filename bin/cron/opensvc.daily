#!/usr/bin/python2.6
#
# Copyright (c) 2009 Christophe Varoqui <christophe.varoqui@free.fr>'
# Copyright (c) 2009 Cyril Galibern <cyril.galibern@free.fr>'
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
import sys
import os
import xmlrpclib
import uuid

"""
When installed in /etc/cron.daily/ this must be a symlink to the
file in the opensvc distrib, wherever installed, so that we can compute
relative paths to locate libs
"""
pathfile = os.path.realpath(__file__)
pathsvc = os.path.join(os.path.dirname(pathfile), '..', '..')
pathlib = os.path.join(pathsvc, 'lib')
sys.path.append(pathlib)
hostid = str(uuid.getnode())

import svcBuilder
from rcGlobalEnv import rcEnv
from rcUtilities import call, which

proxy = xmlrpclib.ServerProxy(rcEnv.dbopensvc, allow_none=True)

disk_ids = {}
def disk_id(dev):
    if dev in disk_ids:
        return disk_ids[dev]
    if which('scsi_id'):
        scsi_id = 'scsi_id'
    elif which('/lib/udev/scsi_id'):
        scsi_id = '/lib/udev/scsi_id'
    else:
        return
    cmd = [scsi_id, '-g', '-u', '-d', dev]
    (ret, out) = call(cmd)
    if ret == 0:
        id = out.split('\n')[0][1:]
        disk_ids[dev] = id
        return id
    sdev = dev.replace("/dev/", "/block/")
    cmd = [scsi_id, '-g', '-u', '-s', sdev]
    (ret, out) = call(cmd)
    if ret == 0:
        id = out.split('\n')[0][1:]
        disk_ids[dev] = id
        return id
    return

def disk_vendor(dev):
    s = ''
    path = dev.replace('/dev/', '/sys/block/')+'/device/vendor'
    if not os.path.exists(path):
        return
    with open(path, 'r') as f:
        s = f.read()
        f.close()
    return s

def disk_model(dev):
    s = ''
    path = dev.replace('/dev/', '/sys/block/')+'/device/model'
    if not os.path.exists(path):
        return
    with open(path, 'r') as f:
        s = f.read()
        f.close()
    return s

def disk_size(dev):
    size = 0
    path = dev.replace('/dev/', '/sys/block/')+'/size'
    if not os.path.exists(path):
        return
    with open(path, 'r') as f:
        size = f.read()
        f.close()
    return int(size)/2097152

def disk_dg(dev):
    if not which('pvs'):
        return
    cmd = ['pvs', '--noheadings', '-o', 'vg_name', dev]
    (ret, out) = call(cmd)
    if ret != 0 or len(out) == 0:
        return
    return out.strip()


""" Purge current service configurations from database
    for this host
"""
try:
    proxy.delete_services(hostid)
except:
    pass

for svc in svcBuilder.build_services():
    """ Load service configuration in database
    """
    try:
        proxy.delete_syncs(svc.svcname)
        for rset in svc.get_res_sets("rsync"):
            for r in rset.resources:
                if rcEnv.pathsvc in r.dst:
                    continue
                proxy.register_sync(
                    ['sync_svcname',
                     'sync_src',
                     'sync_dst',
                     'sync_dstfs',
                     'sync_exclude',
                     'sync_snap',
                     'sync_prdtarget',
                     'sync_drptarget',
                     'sync_bwlimit'],
                    [repr(svc.svcname),
                     repr(' '.join(r.src)),
                     repr(r.dst),
                     repr(str(r.dstfs)),
                     repr(str(' '.join(r.exclude))),
                     repr(str(r.snap)),
                     repr(' '.join(r.target['nodes'])),
                     repr(' '.join(r.target['drpnodes'])),
                     repr(str(r.bwlimit))]
                )
    except:
        pass

    try:
        for d in svc.disklist():
            proxy.register_disk(
                ['disk_id',
                 'disk_svcname',
                 'disk_size',
                 'disk_vendor',
                 'disk_model',
                 'disk_dg',
                 'disk_nodename'],
                [repr(disk_id(d)),
                 repr(svc.svcname),
                 repr(disk_size(d)),
                 repr(disk_vendor(d)),
                 repr(disk_model(d)),
                 repr(disk_dg(d)),
                 repr(rcEnv.nodename)]
            )
    except:
        pass

    try:
        proxy.update_service(
            ['svc_hostid',
             'svc_name',
             'svc_type',
             'svc_nodes',
             'svc_drpnode',
             'svc_drpnodes',
             'svc_comment',
             'svc_drptype',
             'svc_autostart',
             'svc_app',
             'svc_containertype',
             'svc_drnoaction'],
            [repr(hostid),
             repr(svc.svcname),
             repr(svc.svctype),
             repr(' '.join(svc.nodes)),
             repr(svc.drpnode),
             repr(' '.join(svc.drpnodes)),
             repr(svc.comment),
             repr(svc.drp_type),
             repr(svc.autostart_node),
             repr(svc.app),
             repr(svc.svcmode),
             repr(svc.drnoaction)]
        )
    except:
        pass

    try:
        svc.action('syncnodes')
    except:
        pass

    try:
        svc.action('syncdrp')
    except:
        pass
