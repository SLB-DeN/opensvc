#!/usr/bin/python2.6
#
# Copyright (c) 2009 Christophe Varoqui <christophe.varoqui@free.fr>'
# Copyright (c) 2009 Cyril Galibern <cyril.galibern@free.fr>'
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
import sys
import os
import xmlrpclib
import uuid

"""
When installed in /etc/cron.daily/ this must be a symlink to the
file in the opensvc distrib, wherever installed, so that we can compute
relative paths to locate libs
"""
pathfile = os.path.realpath(__file__)
pathsvc = os.path.join(os.path.dirname(pathfile), '..', '..')
pathlib = os.path.join(pathsvc, 'lib')
sys.path.append(pathlib)
hostid = str(uuid.getnode())

import svcBuilder
from rcGlobalEnv import rcEnv

proxy = xmlrpclib.ServerProxy(rcEnv.dbopensvc)
proxy.delete_services(hostid)
for svc in svcBuilder.build_services():
    proxy.update_service(
	['svc_hostid',
	 'svc_name',
	 'svc_type',
	 'svc_nodes',
	 'svc_drpnode',
	 'svc_drpnodes',
	 'svc_comment',
	 'svc_drptype',
	 'svc_autostart',
	 'svc_app',
	 'svc_containertype',
	 'svc_drnoaction'],
	[repr(hostid),
	 repr(svc.svcname),
	 repr(svc.svctype),
	 repr(' '.join(svc.nodes)),
	 repr(svc.drpnode),
	 repr(' '.join(svc.drpnodes)),
	 repr(svc.comment),
	 repr(svc.drp_type),
	 repr(svc.autostart_node),
	 repr(svc.app),
	 repr(svc.svcmode),
	 repr(svc.drnoaction)]
    )

    try:
        svc.action('syncnodes')
    except:
        pass

    try:
        svc.action('syncdrp')
    except:
        pass
