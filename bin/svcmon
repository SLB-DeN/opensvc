#!/usr/bin/env python2.6
#
# Copyright (c) 2009 Christophe Varoqui <christophe.varoqui@free.fr>'
# Copyright (c) 2009 Cyril Galibern <cyril.galibern@free.fr>'
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
import sys
import os
import optparse
import string

#
# add project lib to path
#
pathsvc = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
pathetc = os.path.join(pathsvc, 'etc')
sys.path.append(os.path.join(pathsvc, 'lib'))

import svcBuilder
import xmlrpcClient
from rcUtilities import *
from rcGlobalEnv import rcEnv

def svcmon_verbose(svcs):
    for svc in svcs:
        print banner(svc.svcname)
        try:
            svc.print_status()
        except:
            pass

def max_len(svcs, attr):
    _len = 0
    for svc in svcs:
        if _len < len(getattr(svc, attr)):
            _len = len(getattr(svc, attr))
    return _len

def svcmon_normal1(svc, upddb=False, fmt=None):
    status = svc.group_status()
    print fmt % (
              svc.svcname,
              svc.svctype,
              svc.svcmode,
              status["container"],
              status["ip"],
              status["disk"],
              status["fs"],
              status["app"],
              status["sync"],
              status["overall"])
    if upddb:
        xmlrpcClient.svcmon_update(svc, status)

def svcmon_normal(svcs, upddb=False):
    fmt = '%-' + str(max_len(svcs, "svcname")) + 's'
    fmt += ' %-7s %-9s %-9s %-9s %-10s %-10s %-10s %-10s %-10s'

    print fmt % ("service", "service", "container", "container", "ip    ", "disk  ", "fs    ", "app   ", "sync  ", "overall")
    print fmt % ("name   ", "type   ", "type     ", "status   ", "status", "status", "status", "status", "status", "status ")
    print fmt % ("-------", "-------", "---------", "---------", "------", "------", "------", "------", "------", "-------")
    from multiprocessing import Process
    ps = []
    for svc in svcs:
        p = Process(target=svcmon_normal1, args=(svc, upddb, fmt))
        p.start()
        ps.append(p)
    for p in ps:
        p.join()

svcs = []
__ver = rcEnv.prog + " version " + str(rcEnv.ver)
__usage = "%prog [options]\n\nDisplay services status"
parser = optparse.OptionParser(version=__ver, usage=__usage)
parser.add_option("--service", default=None, action="store", dest="parm_svcs",
                  help="comma-separated list of service to display status of")
parser.add_option("--updatedb", default=None, action="store_true", dest="parm_upddb",
                  help="update resource status in central database")
parser.add_option("--verbose", default=None, action="store_true", dest="parm_verbose",
                  help="display per-resource status for each selected service")

(options, args) = parser.parse_args()

if hasattr(options, "parm_upddb") and options.parm_upddb is not None:
    upddb = True
else:
    upddb = False

if hasattr(options, "parm_svcs") and options.parm_svcs is not None:
    svcs = svcBuilder.build_services(svcnames=options.parm_svcs.split(','))
else:
    svcs = svcBuilder.build_services()

if hasattr(options, "parm_verbose") and options.parm_verbose is not None:
    svcmon_verbose(svcs)
else:
    svcmon_normal(svcs, upddb)


