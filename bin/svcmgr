#!/usr/bin/python
#
# Copyright (c) 2009 Christophe Varoqui <christophe.varoqui@free.fr>'
# Copyright (c) 2009 Cyril Galibern <cyril.galibern@free.fr>'
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
import sys
import os
import optparse

#
# add project lib to path
#
pathsvc = os.path.join(os.path.dirname(__file__), '..')
pathetc = os.path.join(pathsvc, 'etc')
rcService = os.path.join(pathsvc, 'bin', 'rcService')
sys.path.append(os.path.join(pathsvc, 'lib'))

import svcBuilder
import rcStatus
import rcOptParser
from rcUtilities import banner
from rcGlobalEnv import *

svcs = []
__ver = rcEnv.prog + " version " + str(rcEnv.ver)
parser = optparse.OptionParser(version=__ver)

status = None
cmd = os.path.basename(__file__)
if cmd == 'allservices':
	svcs = svcBuilder.build_services()
elif cmd == 'allupservices':
	svcs = svcBuilder.build_services(rcStatus.UP)
elif cmd == 'alldownservices':
	svcs = svcBuilder.build_services(rcStatus.DOWN)
elif cmd == 'svcmgr':
	parser.add_option("--service", default=None, action="store", dest="parm_svcs",
			  help="comma-separated list of service to operate on")

(options, args) = parser.parse_args()
if hasattr(options, "parm_svcs"):
	if ',' in options.parm_svcs:
		for name in options.parm_svcs.split(','):
			f = os.path.join(pathsvc, 'etc', name)
			if svcBuilder.is_service(f):
				svcs.append(name)
	else:
		f = os.path.join(pathsvc, 'etc', options.parm_svcs)
		if svcBuilder.is_service(f):
			svcs.append(options.parm_svcs)

if len(args) > 1:
	parser.error("More than one action")
if len(args) is 0:
	parser.error("Missing action")
action = args[0]
if not action in rcOptParser.action_desc.keys():
	parser.error("unsupported action")

for s in svcs:
	print banner(s)
	svc = svcBuilder.build(s)
	getattr(svc, action)()

