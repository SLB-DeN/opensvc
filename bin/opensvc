#!/bin/sh

# variables users can override in the defaults file
OSVC_ROOT_PATH="/usr/share/opensvc"
OSVC_PYTHON="python"
OSVC_PYTHON_ARGS=""

if [ -r "/etc/defaults/opensvc" ]
then
	# FreeBSD, Darwin
	. "/etc/defaults/opensvc"
elif [ -r "/etc/default/opensvc" ]
then
	# Debian-like, Tru64, SunOS and HP-UX
	. "/etc/default/opensvc"
elif [ -r "/etc/sysconfig/opensvc" ]
then
	# Red Hat-like
	. "/etc/sysconfig/opensvc"
elif [ -r "/etc/conf.d/opensvc" ]
then
	# Alpine, Gentoo
	. "/etc/conf.d/opensvc"
elif [ -r "/etc/rc.config.d/opensvc" ]
then
	# AIX
	. "/etc/rc.config.d/opensvc"
fi

BASENAME=`basename $0`

sudo_command_exe() {
	set $SUDO_COMMAND
	echo $1
}

case $BASENAME in
opensvc)
	#
	# Use me as the shebang for python modules to be garantied the
	# same python requirements than the agent are met (ie 2.6+).
	#
	# Example: #!/usr/bin/env opensvc
	#
	exec "$OSVC_PYTHON" "$@"
	;;
esac

if [ "$BASENAME" = "nodemgr" -o "$BASENAME" = "svcmgr" -o "$BASENAME" = "svcmon" ]
then
	unset OSVC_SERVICE_LINK
	BIN="$OSVC_ROOT_PATH/lib/$BASENAME.py"
elif [ ! -z "$SUDO_COMMAND" ]
then
	# exec from a service link: add the --service parameter
	# sudo reports a wrong $0 for duplicate svcname in different namespaces.
	# don't trust it, and use SUDO_COMMAND
	EXE=`sudo_command_exe`
	BASENAME=`basename $EXE`
	DIRNAME=`dirname $EXE`
	OSVC_SERVICE_LINK="`cd $DIRNAME && echo $PWD`/$BASENAME"
	export OSVC_SERVICE_LINK
	BIN="$OSVC_ROOT_PATH/lib/svcmgr.py"
else
	# exec from a service link: add the --service parameter
	DIRNAME=`dirname $0`
	OSVC_SERVICE_LINK="`cd $DIRNAME && echo $PWD`/$BASENAME"
	export OSVC_SERVICE_LINK
	BIN="$OSVC_ROOT_PATH/lib/svcmgr.py"
fi

"$OSVC_PYTHON" $OSVC_PYTHON_ARGS "$BIN" $BIN_ARGS "$@"

