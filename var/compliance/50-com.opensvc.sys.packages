#!/opt/opensvc/bin/python
""" 
module use OSVC_COMP_PACKAGES_... vars
which define ['pkg1', 'pkg2', ...]
"""

import os
import sys
import json
import pwd
from subprocess import *

RET_OK = 0
RET_ERR = 1
RET_NA = 2

RET = RET_ERR

PREFIX = 'OSVC_COMP_PACKAGES_'

sysname, nodename, x, x, machine = os.uname()

if sysname not in ['Linux']:
    print 'module not supported on', sysname
    sys.exit(RET_NA)

packages = []
for k in [ key for key in os.environ if key.startswith(PREFIX)]:
    try:
        packages += json.loads(os.environ[k])
    except ValueError:
        print >>sys.stderr, 'failed to concatenate', os.environ[k], 'to package list'

if len(packages) == 0:
    print "no applicable variable found in rulesets", PREFIX
    sys.exit(RET_NA)

def rpm_get_installed_packages():
    p = Popen(['rpm', '-qa', '--qf', '%{n}\n'], stdout=PIPE)
    (out, err) = p.communicate()
    if p.returncode != 0:
        print >>sys.stderr, 'can not fetch installed packages list'
        return []
    return out.split('\n')

def deb_get_installed_packages():
    p = Popen(['dpkg', '-l'], stdout=PIPE)
    (out, err) = p.communicate()
    if p.returncode != 0:
        print >>sys.stderr, 'can not fetch installed packages list'
        return []
    l = []
    for line in out.split('\n'):
        if not line.startswith('ii'):
            continue
        l.append(line.split()[1])
    return l

def yum_fix_pkg(pkg):
    if check_pkg(pkg, verbose=False) == RET_OK:
        return RET_OK
    r = call(['yum', 'install', '-y', pkg])
    if r != 0:
        return RET_ERR
    return RET_OK

def apt_fix_pkg(pkg):
    if check_pkg(pkg, verbose=False) == RET_OK:
        return RET_OK
    r = call(['apt-get', 'install', '-y', pkg])
    if r != 0:
        return RET_ERR
    return RET_OK

vendor = os.environ['OSVC_COMP_NODES_OS_VENDOR']
if vendor == 'Debian':
    get_installed_packages = deb_get_installed_packages
    fix_pkg = apt_fix_pkg
elif vendor in ['CentOS', 'Redhat']:
    get_installed_packages = rpm_get_installed_packages
    fix_pkg = yum_fix_pkg
else:
    print >>sys.stderr, vendor, "not supported"
    sys.exit(RET_ERR)

installed_packages = get_installed_packages()

def fixable():
    return RET_NA

def check_pkg(pkg, verbose=True):
    if not pkg in installed_packages:
        if verbose:
            print >>sys.stderr, 'package', pkg, 'is not installed'
        return RET_ERR
    if verbose:
        print 'package', pkg, 'is installed'
    return RET_OK

def check():
    r = 0
    for pkg in packages:
        r |= check_pkg(pkg)
    return r

def fix():
    r = 0
    for pkg in packages:
        r |= fix_pkg(pkg)
    return r

#
# Main
#
if len(sys.argv) != 2:
    print >>sys.stderr, "need argument"
    sys.exit(RET_ERR)
try:
    if sys.argv[1] == 'check':
        RET = check()
    elif sys.argv[1] == 'fix':
        RET = fix()
    elif sys.argv[1] == 'fixable':
        RET = fixable()
    else:
        print >>sys.stderr, "unsupported argument '%s'"%sys.argv[1]
        RET = RET_ERR
except:
    import traceback
    traceback.print_exc()
    sys.exit(RET_ERR)
sys.exit(RET)
